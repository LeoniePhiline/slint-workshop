import { Palette } from "std-widgets.slint";

export global LayoutMetrics {
    out property <length> window-height: 240px;
    out property <length> window-width: 240px;

    out property <length> padding: 5px;
}

export component TitleBar inherits Rectangle {
    in property <string> text <=> title-text.text;

    width: 100%;
    height: 30px;
    padding-top: LayoutMetrics.padding;
    padding-bottom: LayoutMetrics.padding;
    background: Palette.alternate-background;

    title-text := Text {
        font-size: 16px;
    }
}

export component StatusBar inherits Rectangle {
    in property <string> text <=> status-text.text;

    height: 24px;
    padding-top: LayoutMetrics.padding;
    padding-bottom: LayoutMetrics.padding;
    background: Palette.alternate-background;

    status-text := Text {
        height: root.height - 2 * LayoutMetrics.padding;
        horizontal-alignment: center;
        vertical-alignment: bottom;
    }
}

export component BarGauge {
    // TODO: Set empty defaults (no has-value, 0)
    in property <bool> has-value: true;
    in property <float> value: 100;
    in property <float> min-value: 0;
    in property <float> max-value: 100;

    in property <string> unit: " Â°C";
    in property <brush> background <=> fill.background;

    property <length> gauge-width: 40px;

    // Level is between 0 and 1
	out property <float> level:
	    (Math.clamp(self.value, self.min-value, self.max-value) - self.min-value) / (self.max-value - self.min-value);

    states [
        with-value when root.has-value: {
            value-text.visible: true;
            fill.visible: true;
        }
        without-value when !root.has-value: {
            value-text.visible: false;
            fill.visible: false;
        }
    ]

    bar := Rectangle {
        x: 0;
        border-width: 2px;
        border-color: Palette.border;
        border-radius: 4 * LayoutMetrics.padding;
        width: root.gauge-width;
        height: root.height;

        clip: true;

        fill := Rectangle {
            x: 0;
            y: parent.height - self.height;
            height: root.height * root.level;
            background: Colors.red;

            animate height {
                duration: 200ms;
                easing: ease-in-out;
            }
        }
    }

    value-text := Text {
        text: "" + Math.round(root.value * 10)  / 10 + root.unit;
        font-size: 32px;
        x: 40px + LayoutMetrics.padding;
    }
}
